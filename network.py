import random
import utils

class network:
  def __init__(self,shape):
    layers=[]
    for i in range(len(shape)-1):
      lyr=layer(shape[i],shape[i+1])
      layers.append(lyr)

    self.layers=layers
  
  def feed_forward(self,network_inputs):

    layer_outputs=self.layers[0].feed_forward(network_inputs)

    for l in range(1,len(self.layers)):
      layer_outputs=self.layers[l].feed_forward(layer_outputs)
    
    return layer_outputs

  def birth(self,p):
    for layer in self.layers:
      for bias in layer.biases:
        bias=utils.lerp(bias,(random.random()*2)-1,p)

      for out_weights in layer.weights:
        for connection in out_weights:
          connection = utils.lerp(connection, (random.random()*2)-1, p)
          
    return self

class layer:
  def __init__(self,inp,out):

   self.inp=inp
   self.out=out

   self.biases,self.weights=self.generate_layer_contents()
  
  def generate_layer_contents(self):

    bs=[]
    for i in range(self.out):
      bs.append((random.random()*2)-1)

    ws=[]
    for i in range(self.out):
      out_weights=[]
      for j in range(self.inp):
        out_weights.append((random.random()*2)-1)
      ws.append(out_weights)

    return bs,ws

  def feed_forward(self,layer_inputs):
    layer_outputs=[]
    for j in range(self.out):
      act=0
      for i in range(self.inp):
        act+=(layer_inputs[i]*self.weights[j][i])

      layer_outputs.append(utils.sigmoid(act-self.biases[j]))

    return layer_outputs

    